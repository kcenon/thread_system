name: Build-Windows-MinGW

on:
  push:
    branches:
      - main
      - release**
  pull_request:
    branches:
      - main
      - release**
  workflow_dispatch:

jobs:
  build_windows_mingw:
    runs-on: windows-latest
    timeout-minutes: 60
    env:
      BUILD_TYPE: Debug
    
    steps:
      - name: Clean workspace
        run: |
          if (Test-Path .git) {
            Remove-Item -Recurse -Force .git
          }
          if (Test-Path .github) {
            Remove-Item -Recurse -Force .github
          }
        shell: pwsh
      
      - name: Configure git
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global core.longpaths true
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: kcenon/thread_system
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-depth: 1
          fetch-tags: false
          show-progress: true
          lfs: false
          set-safe-directory: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Setup MinGW
        shell: pwsh
        run: |
          choco install mingw --version=12.2.0 -y
          $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          echo "$mingwPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "Adding MinGW to system PATH..."
          $env:PATH = "$mingwPath;$env:PATH"
          refreshenv
          
          # Verify installations
          Write-Host "Checking gcc version..."
          gcc --version
          Write-Host "Checking g++ version..."
          g++ --version
          Write-Host "Checking make version..."
          mingw32-make --version

      - name: Install CMake
        shell: pwsh
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          refreshenv
          cmake --version

      - name: Cache vcpkg
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-mingw-vcpkg-${{ hashFiles('**/vcpkg.json') }}

      - name: Set up vcpkg
        shell: pwsh
        run: |
          if (!(Test-Path -Path .\vcpkg)) {
            Write-Host "Cloning vcpkg repository..."
            git clone https://github.com/Microsoft/vcpkg.git
          } else {
            Write-Host "Updating existing vcpkg repository..."
            Push-Location .\vcpkg
            git pull
            Pop-Location
          }
          
          Write-Host "Bootstrapping vcpkg..."
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
          
          Write-Host "Integrating vcpkg..."
          .\vcpkg\vcpkg.exe integrate install

      - name: Cache vcpkg installed
        uses: actions/cache@v3
        id: vcpkg-installed
        with:
          path: ${{ github.workspace }}/vcpkg_installed
          key: ${{ runner.os }}-mingw-vcpkg-installed-${{ hashFiles('**/vcpkg.json') }}

      - name: Install dependencies with vcpkg
        if: steps.vcpkg-installed.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Installing dependencies..."
          .\vcpkg\vcpkg.exe install --x-manifest-root=. --x-install-root=${{ github.workspace }}/vcpkg_installed --triplet x64-mingw-dynamic

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/build
          key: ${{ runner.os }}-cmake-mingw-${{ hashFiles('CMakeLists.txt', 'vcpkg.json') }}-${{ env.BUILD_TYPE }}

      - name: Build application
        shell: pwsh
        run: |
          Write-Host "Creating build directory..."
          New-Item -ItemType Directory -Force -Path build | Out-Null
          
          Write-Host "Configuring CMake..."
          Push-Location build
          
          $env:CC = "gcc"
          $env:CXX = "g++"
          
          cmake .. -G "MinGW Makefiles" `
                  -DCMAKE_C_COMPILER=gcc `
                  -DCMAKE_CXX_COMPILER=g++ `
                  -DCMAKE_MAKE_PROGRAM=mingw32-make `
                  -DBUILD_TESTS=ON `
                  -DCMAKE_INSTALL_PREFIX="..\target" `
                  -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE `
                  -DCMAKE_TOOLCHAIN_FILE="$env:GITHUB_WORKSPACE\vcpkg\scripts\buildsystems\vcpkg.cmake" `
                  -DVCPKG_TARGET_TRIPLET=x64-mingw-dynamic
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "CMake configuration failed"
              exit 1
          }
          
          Write-Host "Building project..."
          cmake --build . --config $env:BUILD_TYPE --parallel $env:NUMBER_OF_PROCESSORS
          
          Pop-Location

      - name: Cache built libraries
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-built-libs-mingw-${{ hashFiles('CMakeLists.txt', 'vcpkg.json', 'src/**/*.cpp', 'src/**/*.h') }}-${{ env.BUILD_TYPE }}