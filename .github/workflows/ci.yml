name: CI

on:
  push:
    branches: [ main, phase-* ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} / ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        compiler: [gcc, clang, msvc]
        exclude:
          - os: ubuntu-22.04
            compiler: msvc
          - os: macos-13
            compiler: msvc
          - os: macos-13
            compiler: gcc
          - os: windows-2022
            compiler: gcc
          - os: windows-2022
            compiler: clang

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja

    - name: Set up compiler (GCC)
      if: matrix.compiler == 'gcc'
      run: |
        echo "CC=gcc-12" >> $GITHUB_ENV
        echo "CXX=g++-12" >> $GITHUB_ENV

    - name: Set up compiler (Clang)
      if: matrix.compiler == 'clang' && runner.os != 'Windows'
      run: |
        echo "CC=clang-15" >> $GITHUB_ENV
        echo "CXX=clang++-15" >> $GITHUB_ENV

    - name: Set up compiler (MSVC)
      if: matrix.compiler == 'msvc'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure CMake
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DBUILD_WITH_COMMON_SYSTEM=ON

    - name: Build
      run: cmake --build build --config Release

    - name: Test
      run: |
        cd build
        ctest --output-on-failure -C Release

    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}-logs
        path: |
          build/CMakeFiles/*.log
          build/Testing/Temporary/

  sanitizer-builds:
    name: Sanitizers / ${{ matrix.sanitizer }}
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        sanitizer: [thread, address, undefined]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-15

    - name: Configure CMake with ${{ matrix.sanitizer }}
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang-15 \
          -DCMAKE_CXX_COMPILER=clang++-15 \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer -g" \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DBUILD_WITH_COMMON_SYSTEM=ON

    - name: Build with sanitizer
      run: cmake --build build

    - name: Run tests with sanitizer
      run: |
        cd build
        export ASAN_OPTIONS=detect_leaks=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
        export UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1
        export TSAN_OPTIONS=second_deadlock_stack=1
        ctest --output-on-failure

    - name: Upload sanitizer logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: sanitizer-${{ matrix.sanitizer }}-logs
        path: build/Testing/Temporary/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build lcov

    - name: Configure CMake with coverage
      run: |
        cmake -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DBUILD_WITH_COMMON_SYSTEM=ON \
          -DENABLE_COVERAGE=ON

    - name: Build
      run: cmake --build build

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

    - name: Generate coverage report
      run: |
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/vcpkg/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.info
        fail_ci_if_error: false
        verbose: true
