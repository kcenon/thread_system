name: Integration Tests

on:
  push:
    branches: [ main, feat/phase5-integration-testing ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-tests-ubuntu:
    name: Integration Tests (Ubuntu)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Debug, Release]
        compiler:
          - { name: GCC, cc: gcc-11, cxx: g++-11 }
          - { name: Clang, cc: clang-14, cxx: clang++-14 }

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          ${{ matrix.compiler.cc }} \
          ${{ matrix.compiler.cxx }} \
          libc++-14-dev \
          libc++abi-14-dev \
          libfmt-dev
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (optional dependency)
      continue-on-error: true
      run: |
        cd ..
        if [ ! -d "common_system" ]; then
          git clone https://github.com/kcenon/common_system.git || echo "common_system not available"
        fi

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-${{ matrix.compiler.name }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/ThreadSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler.name }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-${{ matrix.compiler.name }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake
      env:
        CC: ${{ matrix.compiler.cc }}
        CXX: ${{ matrix.compiler.cxx }}
      run: |
        BUILD_WITH_COMMON="OFF"
        if [ -d "../common_system" ]; then
          BUILD_WITH_COMMON="ON"
        fi

        echo "=== Build Configuration ==="
        echo "Compiler: ${{ matrix.compiler.name }}"
        echo "Build Type: ${{ matrix.build-type }}"
        echo "Common System: $BUILD_WITH_COMMON"
        echo "GTest: Will be fetched via FetchContent if needed"
        echo "==========================="

        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=$BUILD_WITH_COMMON \
          -DCMAKE_PREFIX_PATH="/usr" \
          --debug-find || {
            echo "::error::CMake configuration failed"
            echo "CMake logs:"
            cat build/CMakeFiles/CMakeError.log 2>/dev/null || echo "No CMakeError.log found"
            exit 1
          }

    - name: Build
      run: |
        echo "=== Building with ${{ matrix.compiler.name }} ==="
        cmake --build build --config ${{ matrix.build-type }} --verbose || {
          echo "::error::Build failed with ${{ matrix.compiler.name }}"
          exit 1
        }

    - name: Run Smoke and Integration Tests
      working-directory: build
      run: |
        echo "=== Running Fast Tests (Smoke + Integration) ==="
        ctest --output-on-failure -L "smoke|integration" -C ${{ matrix.build-type }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-ubuntu-${{ matrix.compiler.name }}-${{ matrix.build-type }}
        path: build/Testing/Temporary/LastTest.log

  integration-tests-macos:
    name: Integration Tests (macOS)
    runs-on: macos-latest
    strategy:
      matrix:
        build-type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        brew install cmake ninja fmt
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (optional dependency)
      continue-on-error: true
      run: |
        cd ..
        if [ ! -d "common_system" ]; then
          git clone https://github.com/kcenon/common_system.git || echo "common_system not available"
        fi

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/ThreadSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.build-type }}-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake
      run: |
        BUILD_WITH_COMMON="OFF"
        if [ -d "../common_system" ]; then
          BUILD_WITH_COMMON="ON"
        fi

        echo "=== Build Configuration ==="
        echo "Build Type: ${{ matrix.build-type }}"
        echo "Common System: $BUILD_WITH_COMMON"
        echo "GTest: Will be fetched via FetchContent if needed"
        echo "==========================="

        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DBUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=$BUILD_WITH_COMMON \
          --debug-find || {
            echo "::error::CMake configuration failed"
            echo "CMake logs:"
            cat build/CMakeFiles/CMakeError.log 2>/dev/null || echo "No CMakeError.log found"
            exit 1
          }

    - name: Build
      run: cmake --build build --config ${{ matrix.build-type }}

    - name: Run Smoke and Integration Tests
      working-directory: build
      run: |
        echo "=== Running Fast Tests (Smoke + Integration) ==="
        ctest --output-on-failure -L "smoke|integration" -C ${{ matrix.build-type }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-macos-${{ matrix.build-type }}
        path: build/Testing/Temporary/LastTest.log

  integration-tests-windows:
    name: Integration Tests (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        build-type: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Checkout common_system (optional dependency)
      continue-on-error: true
      run: |
        cd ..
        if (-not (Test-Path "common_system")) {
          git clone https://github.com/kcenon/common_system.git
          if (-not $?) { Write-Host "common_system not available" }
        }

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '50c0cb48a0cf2f6fc5c7b2c0d2bafbe26d0a7ca2'

    - name: Configure CMake
      env:
        VCPKG_FEATURE_FLAGS: manifests
      run: |
        $buildWithCommon = "OFF"
        if (Test-Path "../common_system") {
          $buildWithCommon = "ON"
        }
        cmake -B build `
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} `
          -DBUILD_INTEGRATION_TESTS=ON `
          -DBUILD_WITH_COMMON_SYSTEM=$buildWithCommon `
          -DVCPKG_MANIFEST_FEATURES="testing" `
          -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

    - name: Build
      run: cmake --build build --config ${{ matrix.build-type }}

    - name: Run Smoke and Integration Tests
      working-directory: build
      run: |
        echo "=== Running Fast Tests (Smoke + Integration) ==="
        ctest --output-on-failure -L "smoke|integration" -C ${{ matrix.build-type }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-windows-${{ matrix.build-type }}
        path: build/Testing/Temporary/LastTest.log

  coverage:
    name: Integration Test Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          gcc-11 \
          g++-11 \
          lcov \
          libfmt-dev
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (optional dependency)
      continue-on-error: true
      run: |
        cd ..
        if [ ! -d "common_system" ]; then
          git clone https://github.com/kcenon/common_system.git || echo "common_system not available"
        fi

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-gcc-Debug-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/ThreadSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-gcc-Debug-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake with Coverage
      env:
        CC: gcc-11
        CXX: g++-11
      run: |
        BUILD_WITH_COMMON="OFF"
        if [ -d "../common_system" ]; then
          BUILD_WITH_COMMON="ON"
        fi
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_INTEGRATION_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=$BUILD_WITH_COMMON \
          -DENABLE_COVERAGE=ON \
          -DCMAKE_PREFIX_PATH="/usr"

    - name: Build
      run: cmake --build build

    - name: Generate Coverage Report
      run: |
        cd build
        lcov --directory . --zerocounters
        echo "=== Running tests for coverage (smoke + integration) ==="
        ctest --output-on-failure -L "smoke|integration"
        lcov --directory . --capture --output-file coverage/all.info
        lcov --remove coverage/all.info \
          '/usr/*' \
          '*/vcpkg/*' \
          '*/build/*' \
          '*/unittest/*' \
          '*/benchmarks/*' \
          '*/samples/*' \
          '*/test/*' \
          --output-file coverage/all.cleaned.info
        genhtml --demangle-cpp --num-spaces 2 --sort \
          --title "Thread System Integration Coverage" \
          --function-coverage --branch-coverage \
          --output-directory coverage/html \
          coverage/all.cleaned.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: build/coverage/all.cleaned.info
        flags: integration-tests
        name: integration-tests-coverage

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[perf]') || contains(github.event.head_commit.message, '[bench]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          gcc-11 \
          g++-11 \
          libfmt-dev
        # GTest is now fetched via CMake FetchContent - no system package needed

    - name: Checkout common_system (optional dependency)
      continue-on-error: true
      run: |
        cd ..
        if [ ! -d "common_system" ]; then
          git clone https://github.com/kcenon/common_system.git || echo "common_system not available"
        fi

    - name: Cache FetchContent dependencies
      uses: actions/cache@v4
      with:
        path: |
          build/_deps
        key: ${{ runner.os }}-gcc-Release-fetchcontent-gtest-v1.14.0-${{ hashFiles('cmake/ThreadSystemDependencies.cmake', 'integration_tests/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-gcc-Release-fetchcontent-gtest-v1.14.0-
          ${{ runner.os }}-fetchcontent-gtest-v1.14.0-

    - name: Configure CMake
      env:
        CC: gcc-11
        CXX: g++-11
        CI: true
      run: |
        BUILD_WITH_COMMON="OFF"
        if [ -d "../common_system" ]; then
          BUILD_WITH_COMMON="ON"
        fi
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_INTEGRATION_TESTS=ON \
          -DBUILD_PERFORMANCE_TESTS=ON \
          -DBUILD_WITH_COMMON_SYSTEM=$BUILD_WITH_COMMON \
          -DCMAKE_PREFIX_PATH="/usr"

    - name: Build
      run: cmake --build build

    - name: Run Performance Benchmarks
      working-directory: build
      timeout-minutes: 15
      env:
        CI: true
      run: |
        echo "=== Running Performance Benchmarks ==="
        ctest --output-on-failure -L "performance" -V

        echo "=== Generating JSON results ==="
        ./bin/performance_tests --gtest_output=json:performance-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark-results
        path: |
          build/performance-results.json
          build/Testing/Temporary/LastTest.log
